<?xml version='1.0' encoding='utf-8'?>
<code_context><file path="README.md"><code language="markdown"><line number="1"># AI Prompt Tool</line><line number="2" /><line number="3">## Présentation du projet</line><line number="4" /><line number="5">L'AI Prompt Tool est un outil permettant de générer des prompts structurés et complets à partir d'un codebase. Le but est d'offrir à l'utilisateur (par exemple un développeur ou un data scientist) un moyen cohérent et automatisé de créer un contexte riche destiné à un modèle d'IA (comme ChatGPT), afin de faciliter l'analyse, le conseil, le refactoring, ou l'explication du code.</line><line number="6" /><line number="7">## Fonctionnalités principales</line><line number="8" /><line number="9">- **Analyse du code source** : Le script scanne votre répertoire de code, en extrait la structure, les chemins de fichiers et leur contenu.</line><line number="10">- **Consolidation d'information** : Le projet s'appuie sur un fichier de configuration global (`config/user_config.yaml`) pour centraliser les paramètres (répertoire source, patterns d'exclusion, instructions du projet, contexte, etc.) et un fichier séparé pour la requête finale (`config/final_request.yaml`).</line><line number="11">- **Génération d'un prompt complet** : À partir des informations fournies dans les YAML de configuration et des données extraites du code source, l'outil produit un prompt final au format XML. Ce prompt inclut :</line><line number="12">  - Les instructions du projet (objectifs, conventions, performances, UX, etc.)</line><line number="13">  - La structure du projet (fichiers, arborescence)</line><line number="14">  - Le contexte de la base de code (extraits de code, descriptions)</line><line number="15">  - Le format de réponse attendu (basé sur le format choisi par l'utilisateur)</line><line number="16">  - La requête finale personnalisée</line><line number="17" /><line number="18">## Architecture et répertoires</line><line number="19" /><line number="20">- **`config/`** : Contient les fichiers de configuration utilisateur.</line><line number="21">  - `user_config.yaml` : Fichier principal où l'utilisateur définit :</line><line number="22">    - Le répertoire source du code à analyser.</line><line number="23">    - Les patterns d'exclusion (fichiers et dossiers à ignorer).</line><line number="24">    - Les instructions du projet (objectifs, conventions, UX, etc.).</line><line number="25">    - Le contexte du codebase (chemins et descriptions de fichiers clés).</line><line number="26">  - `final_request.yaml` : Contient la demande finale séparée (la requête que vous voulez poser au modèle d'IA).</line><line number="27">  - `formats/` : Répertoire contenant les formats de sortie disponibles (XML, Markdown, JSON, diff, etc.). Chaque format est décrit dans un fichier XML.</line><line number="28" /><line number="29">- **`scripts/`** : Contient les scripts Python pour l'analyse et la génération.</line><line number="30">  - `generate_structure.py` : Analyse l'arborescence du code source défini dans user_config.yaml, génère la structure et le contexte du code.</line><line number="31">  - `generate_prompt.py` : Lit user_config.yaml, final_request.yaml et les données générées par generate_structure.py pour créer le prompt final.</line><line number="32" /><line number="33">- **`templates/`** : Contient le template Jinja2 (`prompt_template.xml.jinja2`) pour générer le prompt final au format XML.</line><line number="34" /><line number="35">- **`output/`** : Répertoire où sont stockés les fichiers générés automatiquement :</line><line number="36">  - `code_structure.xml` : Représentation de la structure du code.</line><line number="37">  - `code_context.xml` : Contexte détaillé (extraits de code).</line><line number="38">  - `final_prompt.xml` : Le prompt final prêt à être utilisé avec un modèle d'IA.</line><line number="39" /><line number="40">- **`run_full_process.sh`** : Script principal qui orchestre tout le processus.</line><line number="41" /><line number="42">## Flux de fonctionnement</line><line number="43" /><line number="44">1. **Préparation** :</line><line number="45">   - L'utilisateur modifie `config/user_config.yaml` pour définir le répertoire source, les exclusions, et les instructions du projet.</line><line number="46">   - L'utilisateur définit sa requête finale dans `config/final_request.yaml`.</line><line number="47">   - Les autres fichiers de configuration (`config/formats/*`) et le template (`templates/prompt_template.xml.jinja2`) sont préconfigurés.</line><line number="48" /><line number="49">2. **Exécution du script principal** :</line><line number="50">   - L'utilisateur lance `./run_full_process.sh`.</line><line number="51">   - Le script vérifie la présence des répertoires et fichiers nécessaires.</line><line number="52" /><line number="53">3. **Analyse de la structure** :</line><line number="54">   - `generate_structure.py` est exécuté.</line><line number="55">   - Il scanne `source_directory` (défini dans user_config.yaml) pour créer `output/code_structure.xml` et `output/code_context.xml`.</line><line number="56" /><line number="57">4. **Choix du format** :</line><line number="58">   - Le script `run_full_process.sh` affiche les formats disponibles (détectés dans `config/formats/`) et demande à l'utilisateur d'en choisir un (ex. none, xml, markdown, etc.).</line><line number="59" /><line number="60">5. **Génération du prompt final** :</line><line number="61">   - `generate_prompt.py` est exécuté avec le format choisi.</line><line number="62">   - Il lit `user_config.yaml` et `final_request.yaml`.</line><line number="63">   - Il charge la structure et le contexte générés précédemment depuis `output/`.</line><line number="64">   - Il charge le template Jinja2 dans `templates/`.</line><line number="65">   - Il construit le prompt final, puis l'écrit dans `output/final_prompt.xml`.</line><line number="66" /><line number="67">6. **Résultat** :</line><line number="68">   - Le prompt final est un fichier XML structuré, enrichi de toutes les instructions et du contexte nécessaire, prêt à être copié-collé dans votre modèle d'IA.</line><line number="69">   - Le script affiche le nombre de caractères et une estimation du nombre de tokens.</line><line number="70" /><line number="71">## Avantages de la nouvelle organisation</line><line number="72" /><line number="73">- **Clarté** :</line><line number="74">  - Un seul fichier principal de configuration (`user_config.yaml`) pour toutes les informations projet/code.</line><line number="75">  - Un fichier séparé pour la requête finale (`final_request.yaml`).</line><line number="76">  - Un répertoire de sortie (`output/`) distinct pour tous les fichiers générés.</line><line number="77" /><line number="78">- **Évolutivité** :</line><line number="79">  - Facile d'ajouter ou de modifier les formats de sortie dans `config/formats/`.</line><line number="80">  - Simple de changer la structure du projet, d'ajouter des catégories, ou de nouveaux objectifs dans le YAML.</line><line number="81" /><line number="82">- **Simplicité d'utilisation** :</line><line number="83">  - L'utilisateur n'a qu'à éditer `user_config.yaml` et `final_request.yaml`.</line><line number="84">  - L'exécution de `run_full_process.sh` gère le reste.</line><line number="85" /><line number="86">## Personnalisation</line><line number="87" /><line number="88">- Vous pouvez ajuster le template Jinja2 (`templates/prompt_template.xml.jinja2`) pour modifier la structure du prompt final.</line><line number="89">- Vous pouvez créer votre propre format en ajoutant un fichier XML dans `config/formats/`.</line><line number="90">- Vous pouvez changer le répertoire source du code, le format par défaut ou les patterns d'exclusion dans `user_config.yaml`.</line><line number="91" /><line number="92">## Exemple d'utilisation</line><line number="93" /><line number="94">1. Modifier `config/user_config.yaml` et `config/final_request.yaml` selon vos besoins.</line><line number="95">2. Lancer :</line><line number="96">   ```</line><line number="97">   ./run_full_process.sh</line><line number="98">   ```</line><line number="99">3. Lorsque le script demande un format, saisir par exemple `none`.</line><line number="100">4. Le prompt final apparaîtra dans `output/final_prompt.xml`.</line><line number="101" /><line number="102">## Support et extensions</line><line number="103" /><line number="104">- **Support multi-langages** : Le prompt final peut être adapté en différentes langues.</line><line number="105">- **Integration CI/CD** : Vous pouvez exécuter ce script dans une pipeline CI pour générer régulièrement des prompts à jour en fonction du code source.</line><line number="106">- **Ajout de nouveaux formats** : Créez un nouveau fichier dans `config/formats/` et modifiez le template si nécessaire.</line><line number="107" /></code></file><file path="run_full_process.sh"><code language="none"><line number="1">#!/usr/bin/env bash</line><line number="2" /><line number="3">set -e</line><line number="4" /><line number="5">echo "Checking required directories..."</line><line number="6">REQUIRED_DIRS=("config" "output" "templates" "scripts")</line><line number="7">for d in "${REQUIRED_DIRS[@]}"; do</line><line number="8">    if [ ! -d "$d" ]; then</line><line number="9">        echo "Error: Directory '$d' not found."</line><line number="10">        exit 1</line><line number="11">    fi</line><line number="12">done</line><line number="13" /><line number="14">if [ ! -f "config/user_config.yaml" ]; then</line><line number="15">    echo "Error: 'config/user_config.yaml' not found."</line><line number="16">    exit 1</line><line number="17">fi</line><line number="18" /><line number="19">if [ ! -f "config/project_data.yaml" ]; then</line><line number="20">    echo "Error: 'config/project_data.yaml' not found."</line><line number="21">    exit 1</line><line number="22">fi</line><line number="23" /><line number="24">if [ ! -f "config/final_request.yaml" ]; then</line><line number="25">    echo "Error: 'config/final_request.yaml' not found."</line><line number="26">    exit 1</line><line number="27">fi</line><line number="28" /><line number="29">if [ ! -d "config/formats" ]; then</line><line number="30">    echo "Error: 'config/formats' directory not found."</line><line number="31">    exit 1</line><line number="32">fi</line><line number="33" /><line number="34">if [ ! -f "templates/prompt_template.xml.jinja2" ]; then</line><line number="35">    echo "Error: Template file 'prompt_template.xml.jinja2' not found."</line><line number="36">    exit 1</line><line number="37">fi</line><line number="38" /><line number="39">if [ ! -f "scripts/generate_structure.py" ] || [ ! -f "scripts/generate_prompt.py" ]; then</line><line number="40">    echo "Error: Required scripts not found."</line><line number="41">    exit 1</line><line number="42">fi</line><line number="43" /><line number="44">ABS_SOURCE_DIR=$(pwd)</line><line number="45">echo "We are about to scan the project source directory at: $ABS_SOURCE_DIR"</line><line number="46" /><line number="47">echo "Running generate_structure.py..."</line><line number="48">python3 scripts/generate_structure.py</line><line number="49" /><line number="50">if [ ! -f "output/code_structure.xml" ]; then</line><line number="51">    echo "Error: 'output/code_structure.xml' not found after running generate_structure.py."</line><line number="52">    exit 1</line><line number="53">fi</line><line number="54" /><line number="55">if [ ! -f "output/code_context.xml" ]; then</line><line number="56">    echo "Warning: 'output/code_context.xml' not found. Possibly no files included."</line><line number="57">fi</line><line number="58" /><line number="59">echo "Formats disponibles :"</line><line number="60">for file in config/formats/*.xml; do</line><line number="61">    base=$(basename "$file" .xml)</line><line number="62">    echo "- $base"</line><line number="63">done</line><line number="64" /><line number="65">read -p "Veuillez saisir un format : " USER_FORMAT</line><line number="66">USER_FORMAT=$(echo "$USER_FORMAT" | tr '[:upper:]' '[:lower:]')</line><line number="67" /><line number="68">if [ ! -f "config/formats/$USER_FORMAT.xml" ]; then</line><line number="69">    echo "Erreur : Le format '$USER_FORMAT' n'est pas supporté."</line><line number="70">    exit 1</line><line number="71">fi</line><line number="72" /><line number="73">echo "Running generate_prompt.py..."</line><line number="74">python3 scripts/generate_prompt.py "$USER_FORMAT" | tee output/final_prompt.xml</line><line number="75" /><line number="76">if [ ! -f "output/final_prompt.xml" ]; then</line><line number="77">    echo "Error: 'output/final_prompt.xml' was not created."</line><line number="78">    exit 1</line><line number="79">fi</line><line number="80" /><line number="81">CHAR_COUNT=$(wc -m &lt; output/final_prompt.xml | tr -d '[:space:]')</line><line number="82">TOKEN_ESTIMATE=$((CHAR_COUNT / 4))</line><line number="83" /><line number="84">echo "----------------------------------------"</line><line number="85">echo "Prompt successfully generated and saved to output/final_prompt.xml"</line><line number="86">echo "Character count: $CHAR_COUNT"</line><line number="87">echo "Estimated tokens (approx): $TOKEN_ESTIMATE"</line><line number="88">echo "----------------------------------------"</line><line number="89">echo "Process completed successfully."</line><line number="90" /></code></file><file path="projet_instruction.md"><code language="markdown"><line number="1">**Objectif du projet :**</line><line number="2" /><line number="3">Créer une borne tactile pour magasins physiques (ex. : Décathlon), permettant aux clients d’essayer virtuellement des vêtements via une technologie de "try-on". L’utilisateur suit un parcours fluide, de la capture d’une photo à la génération des résultats, dans une interface immersive inspirée d’un miroir connecté, avec possibilité de changer la langue de l’interface et de réutiliser des images déjà générées pour de nouveaux essais.</line><line number="4" /><line number="5">---</line><line number="6" /><line number="7">**Gestion multilingue** :</line><line number="8" /><line number="9">- L’interface est conçue pour supporter plusieurs langues.</line><line number="10">- Un système de gestion des langues (fichiers de traduction, variables dynamiques, etc.) doit être en place.</line><line number="11">- Un indicateur (drapeau) visible en haut de l’interface permet de changer facilement la langue.</line><line number="12">- Le changement de langue prend effet immédiatement sur l’ensemble de l’interface.</line><line number="13" /><line number="14">---</line><line number="15" /><line number="16">**Parcours utilisateur et écrans :**</line><line number="17" /><line number="18">**1. Écran d’accueil (avant la session) :**</line><line number="19" /><line number="20">- Affiche le flux vidéo de la webcam en plein écran, comme un miroir connecté.</line><line number="21">- Un bouton "Let’s Play" est superposé, ainsi qu’un cadre pointillé pour aider l’utilisateur à se positionner.</line><line number="22">- Le drapeau indiquant la langue actuelle est visible en haut, permettant de changer la langue.</line><line number="23">- L’utilisateur clique sur "Let’s Play" pour lancer le processus.</line><line number="24" /><line number="25">**2. Modal de consentement légal :**</line><line number="26" /><line number="27">- Une modal apparaît, demandant à l’utilisateur d’accepter les conditions d’utilisation et la sauvegarde de ses photos.</line><line number="28">- S’il accepte, on passe à l’étape suivante. S’il refuse, retour à l’écran d’accueil.</line><line number="29" /><line number="30">**3. Décompte et tutoriel de placement :**</line><line number="31" /><line number="32">- Un décompte de 10s démarre après l’acceptation.</line><line number="33">- Pendant les 5 premières secondes, un modal semi-transparent affiche des tutoriels visuels et textuels pour aider l’utilisateur à se positionner.</line><line number="34">- Passées ces 5s, le modal disparaît, laissant uniquement le décompte.</line><line number="35">- À 0s, la photo initiale est prise.</line><line number="36" /><line number="37">**4. Modal de validation de la photo :**</line><line number="38" /><line number="39">- La photo capturée est affichée en grand.</line><line number="40">- L’utilisateur peut confirmer la photo ou la reprendre (réinitialisant le décompte et le tutoriel).</line><line number="41">- Si confirmée, la session démarre et l’image initiale est sauvegardée en base de données.</line><line number="42" /><line number="43">**5. Écran principal (après validation de la photo initiale) :**</line><line number="44" /><line number="45">- La vue webcam plein écran est remplacée par l’affichage de la photo sélectionnée. La webcam n’est plus affichée après cette étape.</line><line number="46">- À gauche, une barre verticale affiche l’historique :</line><line number="47">    - La photo initiale en haut.</line><line number="48">    - Les nouvelles photos générées seront ajoutées juste en dessous de la photo initiale, créant une liste verticale. Chaque nouvelle génération s’ajoute directement sous l’image initiale, en gardant l’ordre chronologique (la plus récente se retrouve immédiatement sous l’originale).</line><line number="49">- L’utilisateur peut cliquer sur n’importe quelle photo de l’historique pour la sélectionner. **La photo sélectionnée (qu’elle soit l’originale ou une image générée précédemment) est utilisée comme base pour la prochaine génération.** Ainsi, l’utilisateur peut faire un try-on à partir de n’importe quelle image déjà présente dans l’historique.</line><line number="50">- En haut, une barre horizontale présente les catégories de vêtements (T-shirts, Jeans, Pulls, etc.) ainsi que le drapeau de langue.</line><line number="51">- Cliquer sur une catégorie ouvre un modal transparent affichant les différents vêtements de cette catégorie.</line><line number="52">- Le modal transparent laisse voir l’image sélectionnée en fond.</line><line number="53">- En cliquant sur un vêtement, la génération du try-on se lance à partir de l’image actuellement sélectionnée.</line><line number="54" /><line number="55">**6. Écran de génération (progression) :**</line><line number="56" /><line number="57">- Une barre de progression s’affiche, indiquant l’état d’avancement (5s à 1min max).</line><line number="58">- Une zone publicitaire est visible sous la barre de progression.</line><line number="59">- Une fois la génération terminée, l’écran principal réapparaît.</line><line number="60" /><line number="61">**7. Retour à l’écran principal (post-génération) :**</line><line number="62" /><line number="63">- La nouvelle image générée est ajoutée juste en dessous de la photo initiale dans l’historique et est automatiquement sélectionnée.</line><line number="64">- L’utilisateur peut de nouveau choisir une autre catégorie, un autre vêtement, ou changer de langue à tout moment.</line><line number="65" /><line number="66">**8. Fin de session :**</line><line number="67" /><line number="68">- Un bouton "Terminer la session" ouvre un modal :</line><line number="69">    - L’utilisateur peut saisir un numéro de téléphone pour recevoir par SMS toutes les images générées.</line><line number="70">    - Un bouton "Confirmer" envoie les images si un numéro est fourni, sinon termine simplement la session.</line><line number="71">    - Un bouton "Retour" permet d’annuler la fin de session et de continuer.</line><line number="72">    - Un message de remerciement s’affiche.</line><line number="73">- Une fois la session terminée, retour à l’écran d’accueil avec la webcam, prêt pour un nouvel utilisateur.</line><line number="74" /><line number="75">---</line><line number="76" /><line number="77">**Contraintes et exigences :**</line><line number="78" /><line number="79">- **Affichage pleine page** :</line><line number="80">    - Toujours en fullscreen sans scroll global.</line><line number="81">    - Les barres d’historique et de sélection de vêtements sont scrollables dans leurs zones dédiées.</line><line number="82">- **Vue webcam immersive** :</line><line number="83">    - Le flux de la webcam occupe 100% de l’écran **uniquement sur l’écran d’accueil et jusqu’à la prise de la photo initiale**.</line><line number="84">    - Après la validation de la photo initiale, la webcam disparaît et le fullscreen est réservé à l’affichage de l’image sélectionnée (initiale ou générée).</line><line number="85">- **Confidentialité** :</line><line number="86">    - Toutes les photos sont sauvegardées en base de données.</line><line number="87">    - Consentement explicite avant la capture.</line><line number="88">    - Les photos ne sont utilisées que dans la session courante, identifiée par un UID unique.</line><line number="89">- **Gestion des sessions** :</line><line number="90">    - Chaque nouvelle photo initiale crée une nouvelle session.</line><line number="91">    - Données de sessions précédentes non accessibles ensuite.</line><line number="92">- **Performances** :</line><line number="93">    - Génération entre 5s et 1min.</line><line number="94">    - Une seule session utilisateur à la fois.</line><line number="95">- **Architecture propre** :</line><line number="96">    - ESModules, code organisé en `components/`, `pages/`, `services/`, `styles/`.</line><line number="97">    - Commentaires clairs.</line><line number="98">- **Publicité pendant la génération** :</line><line number="99">    - Affichage sous la barre de progression, non intrusive.</line><line number="100">- **Expérience utilisateur fluide** :</line><line number="101">    - Feedbacks visuels/sonores.</line><line number="102">    - Boutons grands et adaptés.</line><line number="103">    - Gestion multilingue à tout moment.</line><line number="104">- **Évolutivité** :</line><line number="105">    - Ajout facile de nouvelles catégories, vêtements, langues, fonctionnalités.</line><line number="106" /><line number="107">---</line><line number="108" /><line number="109">**Résumé :**</line><line number="110" /><line number="111">Ce projet fournit une expérience immersive de try-on virtuel avec prise de photo initiale via une webcam, sélection de vêtements par catégorie, génération d’images à partir de l’image initiale ou de toute image déjà générée, et gestion multilingue intégrée. L’interface évolue du flux webcam au début à l’affichage des images sélectionnées ensuite, permet la fin de session avec envoi par SMS, et respecte les contraintes de performances, de confidentialité et d’ergonomie.</line></code></file><file path="scripts/generate_prompt.py"><code language="python"><line number="1">#!/usr/bin/env python3</line><line number="2">import os</line><line number="3">import sys</line><line number="4">import yaml</line><line number="5">import xml.etree.ElementTree as ET</line><line number="6">from jinja2 import Environment, FileSystemLoader</line><line number="7" /><line number="8">def load_user_config():</line><line number="9">    with open("config/user_config.yaml", "r", encoding="utf-8") as f:</line><line number="10">        return yaml.safe_load(f)</line><line number="11" /><line number="12">def load_project_data():</line><line number="13">    with open("config/project_data.yaml", "r", encoding="utf-8") as f:</line><line number="14">        return yaml.safe_load(f)</line><line number="15" /><line number="16">def load_final_request():</line><line number="17">    with open("config/final_request.yaml", "r", encoding="utf-8") as f:</line><line number="18">        data = yaml.safe_load(f)</line><line number="19">    return data.get("final_request", "Please explain the codebase.")</line><line number="20" /><line number="21">def parse_code_context(root):</line><line number="22">    files_data = []</line><line number="23">    for f in root.findall("./file"):</line><line number="24">        path = f.get("path", "")</line><line number="25">        code_elem = f.find("./code")</line><line number="26">        language = code_elem.get("language", "none") if code_elem is not None else "none"</line><line number="27">        lines_data = []</line><line number="28">        if code_elem is not None:</line><line number="29">            for line_elem in code_elem.findall("./line"):</line><line number="30">                number = line_elem.get("number", "0")</line><line number="31">                text = line_elem.text if line_elem.text else ""</line><line number="32">                lines_data.append({'number': number, 'text': text})</line><line number="33">        files_data.append({</line><line number="34">            'path': path,</line><line number="35">            'language': language,</line><line number="36">            'lines': lines_data</line><line number="37">        })</line><line number="38">    return files_data</line><line number="39" /><line number="40">def main():</line><line number="41">    if len(sys.argv) &lt; 2:</line><line number="42">        print("Error: format argument missing.")</line><line number="43">        sys.exit(1)</line><line number="44" /><line number="45">    chosen_format = sys.argv[1].lower()</line><line number="46" /><line number="47">    project_data = load_project_data()</line><line number="48">    final_request = load_final_request()</line><line number="49" /><line number="50">    # Charger contextes générés</line><line number="51">    code_files = []</line><line number="52">    if os.path.exists("output/code_context.xml"):</line><line number="53">        root_cc = ET.parse("output/code_context.xml").getroot()</line><line number="54">        code_files = parse_code_context(root_cc)</line><line number="55" /><line number="56">    code_structure = ""</line><line number="57">    if os.path.exists("output/code_structure.xml"):</line><line number="58">        with open("output/code_structure.xml", "r", encoding="utf-8") as f:</line><line number="59">            code_structure = f.read().strip()</line><line number="60" /><line number="61">    # Extraire les données du projet</line><line number="62">    pn = project_data.get("project_name", "")</line><line number="63">    objs = project_data.get("objectives", [])</line><line number="64">    cc = project_data.get("code_conventions", {})</line><line number="65">    pl = project_data.get("privacy_and_legal", [])</line><line number="66">    pa = project_data.get("performance_and_architecture", [])</line><line number="67">    ux = project_data.get("ux_guidelines", [])</line><line number="68">    ad = project_data.get("advertising", [])</line><line number="69">    ev = project_data.get("evolutivity", [])</line><line number="70">    codebase_context = project_data.get("codebase_context", [])</line><line number="71" /><line number="72">    lang_stack = cc.get("language_stack", {})</line><line number="73">    dirs_stack = cc.get("directories_structure", {})</line><line number="74">    coding_style = cc.get("coding_style", [])</line><line number="75" /><line number="76">    frontend_stack = lang_stack.get("frontend", "")</line><line number="77">    backend_stack = lang_stack.get("backend", "")</line><line number="78">    directories_frontend = dirs_stack.get("frontend", "")</line><line number="79">    directories_backend = dirs_stack.get("backend", "")</line><line number="80" /><line number="81">    # Construire files_info à partir de codebase_context</line><line number="82">    files_root = ET.Element("files")</line><line number="83">    for cf in codebase_context:</line><line number="84">        file_elem = ET.SubElement(files_root, "file")</line><line number="85">        p = ET.SubElement(file_elem, "path")</line><line number="86">        p.text = cf.get("path", "")</line><line number="87">        d = ET.SubElement(file_elem, "description")</line><line number="88">        d.text = cf.get("description", "")</line><line number="89">    files_info = files_root.findall("./file")</line><line number="90" /><line number="91">    format_file = f"config/formats/{chosen_format}.xml"</line><line number="92">    if not os.path.exists(format_file):</line><line number="93">        print("Format file not found.")</line><line number="94">        sys.exit(1)</line><line number="95">    format_root = ET.parse(format_file).getroot()</line><line number="96" /><line number="97">    def get_list(root, xpath):</line><line number="98">        return [e.text.strip() for e in root.findall(xpath)]</line><line number="99" /><line number="100">    format_instructions = get_list(format_root, "./instructions/instruction")</line><line number="101">    format_examples = get_list(format_root, "./examples/example")</line><line number="102" /><line number="103">    env = Environment(loader=FileSystemLoader("templates"))</line><line number="104">    template = env.get_template("prompt_template.xml.jinja2")</line><line number="105" /><line number="106">    prompt = template.render(</line><line number="107">        project_name=pn,</line><line number="108">        objectives=objs,</line><line number="109">        frontend_stack=frontend_stack,</line><line number="110">        backend_stack=backend_stack,</line><line number="111">        directories_frontend=directories_frontend,</line><line number="112">        directories_backend=directories_backend,</line><line number="113">        coding_style=coding_style,</line><line number="114">        privacy_and_legal=pl,</line><line number="115">        performance_and_arch=pa,</line><line number="116">        ux_guidelines=ux,</line><line number="117">        advertising=ad,</line><line number="118">        evolutivity=ev,</line><line number="119">        code_structure=code_structure,</line><line number="120">        files_info=files_info,</line><line number="121">        code_files=code_files,</line><line number="122">        request=final_request,</line><line number="123">        chosen_format=chosen_format,</line><line number="124">        format_instructions=format_instructions,</line><line number="125">        format_examples=format_examples</line><line number="126">    )</line><line number="127" /><line number="128">    print(prompt)</line><line number="129" /><line number="130">if __name__ == "__main__":</line><line number="131">    main()</line><line number="132" /></code></file><file path="scripts/generate_structure.py"><code language="python"><line number="1">#!/usr/bin/env python3</line><line number="2">import os</line><line number="3">import fnmatch</line><line number="4">import sys</line><line number="5">import yaml</line><line number="6">import xml.etree.ElementTree as ET</line><line number="7" /><line number="8">def load_settings():</line><line number="9">    with open("config/user_config.yaml", "r", encoding="utf-8") as f:</line><line number="10">        data = yaml.safe_load(f)</line><line number="11">    source_directory = data.get("source_directory", ".")</line><line number="12">    exclude_patterns = data.get("exclude_patterns", [])</line><line number="13">    return source_directory, exclude_patterns</line><line number="14" /><line number="15">def is_excluded(path, exclude_patterns):</line><line number="16">    norm_path = path.replace("\\", "/")</line><line number="17">    for pattern in exclude_patterns:</line><line number="18">        if fnmatch.fnmatch(norm_path, pattern) or pattern in norm_path:</line><line number="19">            return True</line><line number="20">    return False</line><line number="21" /><line number="22">def detect_language(extension):</line><line number="23">    lang_map = {</line><line number="24">        ".js": "javascript",</line><line number="25">        ".jsx": "javascript",</line><line number="26">        ".ts": "typescript",</line><line number="27">        ".tsx": "typescript",</line><line number="28">        ".py": "python",</line><line number="29">        ".html": "html",</line><line number="30">        ".css": "css",</line><line number="31">        ".json": "json",</line><line number="32">        ".yaml": "yaml",</line><line number="33">        ".yml": "yaml",</line><line number="34">        ".md": "markdown"</line><line number="35">    }</line><line number="36">    return lang_map.get(extension, "")</line><line number="37" /><line number="38">def is_too_high_in_hierarchy(source_dir):</line><line number="39">    forbidden_paths = ["/", "/home"]</line><line number="40">    abs_source = os.path.abspath(source_dir)</line><line number="41">    return abs_source in forbidden_paths</line><line number="42" /><line number="43">def main():</line><line number="44">    source_directory, exclude_patterns = load_settings()</line><line number="45" /><line number="46">    abs_source = os.path.abspath(source_directory)</line><line number="47">    print(f"About to scan: {abs_source}")</line><line number="48" /><line number="49">    if is_too_high_in_hierarchy(source_directory):</line><line number="50">        print("Error: The source directory is too high.")</line><line number="51">        sys.exit(1)</line><line number="52" /><line number="53">    code_structure = ET.Element("code_structure")</line><line number="54">    code_context = ET.Element("code_context")</line><line number="55" /><line number="56">    if not os.path.exists("output"):</line><line number="57">        os.makedirs("output")</line><line number="58" /><line number="59">    for root, dirs, files in os.walk(source_directory, topdown=True):</line><line number="60">        dirs[:] = [d for d in dirs if not is_excluded(os.path.join(root, d), exclude_patterns)]</line><line number="61">        for filename in files:</line><line number="62">            full_path = os.path.join(root, filename)</line><line number="63">            rel_path = os.path.relpath(full_path, source_directory)</line><line number="64">            if is_excluded(rel_path, exclude_patterns):</line><line number="65">                continue</line><line number="66" /><line number="67">            item = ET.SubElement(code_structure, "file")</line><line number="68">            item.text = rel_path</line><line number="69" /><line number="70">            _, ext = os.path.splitext(filename)</line><line number="71">            code_lang = detect_language(ext)</line><line number="72" /><line number="73">            try:</line><line number="74">                with open(full_path, "r", encoding="utf-8", errors="ignore") as fc:</line><line number="75">                    content = fc.read()</line><line number="76">            except Exception as e:</line><line number="77">                content = f"Could not read file: {e}"</line><line number="78" /><line number="79">            file_elem = ET.SubElement(code_context, "file")</line><line number="80">            file_elem.set("path", rel_path)</line><line number="81">            code_block = ET.SubElement(file_elem, "code")</line><line number="82">            code_block.set("language", code_lang if code_lang else "none")</line><line number="83">            lines = content.split('\n')</line><line number="84">            for i, line in enumerate(lines, start=1):</line><line number="85">                line_elem = ET.SubElement(code_block, "line")</line><line number="86">                line_elem.set("number", str(i))</line><line number="87">                line_elem.text = line</line><line number="88" /><line number="89">    ET.ElementTree(code_structure).write("output/code_structure.xml", encoding="utf-8", xml_declaration=True)</line><line number="90">    ET.ElementTree(code_context).write("output/code_context.xml", encoding="utf-8", xml_declaration=True)</line><line number="91" /><line number="92">    print("Code structure and context generated successfully.")</line><line number="93" /><line number="94">if __name__ == "__main__":</line><line number="95">    main()</line><line number="96" /></code></file><file path="templates/prompt_template.xml.jinja2"><code language="none"><line number="1">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</line><line number="2">&lt;prompt&gt;</line><line number="3">  &lt;project_instructions&gt;</line><line number="4">    &lt;project_name&gt;{{ project_name }}&lt;/project_name&gt;</line><line number="5">    &lt;objectives&gt;</line><line number="6">      {% for obj in objectives %}</line><line number="7">      &lt;objective&gt;{{ obj }}&lt;/objective&gt;</line><line number="8">      {% endfor %}</line><line number="9">    &lt;/objectives&gt;</line><line number="10">    &lt;code_conventions&gt;</line><line number="11">      &lt;language_stack&gt;</line><line number="12">        &lt;frontend&gt;{{ frontend_stack }}&lt;/frontend&gt;</line><line number="13">        &lt;backend&gt;{{ backend_stack }}&lt;/backend&gt;</line><line number="14">      &lt;/language_stack&gt;</line><line number="15">      &lt;directories_structure&gt;</line><line number="16">        &lt;frontend&gt;{{ directories_frontend }}&lt;/frontend&gt;</line><line number="17">        &lt;backend&gt;{{ directories_backend }}&lt;/backend&gt;</line><line number="18">      &lt;/directories_structure&gt;</line><line number="19">      &lt;coding_style&gt;</line><line number="20">        {% for rule in coding_style %}</line><line number="21">        &lt;rule&gt;{{ rule }}&lt;/rule&gt;</line><line number="22">        {% endfor %}</line><line number="23">      &lt;/coding_style&gt;</line><line number="24">    &lt;/code_conventions&gt;</line><line number="25">    &lt;privacy_and_legal&gt;</line><line number="26">      {% for pl in privacy_and_legal %}</line><line number="27">      &lt;item&gt;{{ pl }}&lt;/item&gt;</line><line number="28">      {% endfor %}</line><line number="29">    &lt;/privacy_and_legal&gt;</line><line number="30">    &lt;performance_and_architecture&gt;</line><line number="31">      {% for pa in performance_and_arch %}</line><line number="32">      &lt;item&gt;{{ pa }}&lt;/item&gt;</line><line number="33">      {% endfor %}</line><line number="34">    &lt;/performance_and_architecture&gt;</line><line number="35">    &lt;ux_guidelines&gt;</line><line number="36">      {% for ux in ux_guidelines %}</line><line number="37">      &lt;item&gt;{{ ux }}&lt;/item&gt;</line><line number="38">      {% endfor %}</line><line number="39">    &lt;/ux_guidelines&gt;</line><line number="40">    &lt;advertising&gt;</line><line number="41">      {% for ad in advertising %}</line><line number="42">      &lt;item&gt;{{ ad }}&lt;/item&gt;</line><line number="43">      {% endfor %}</line><line number="44">    &lt;/advertising&gt;</line><line number="45">    &lt;evolutivity&gt;</line><line number="46">      {% for ev in evolutivity %}</line><line number="47">      &lt;item&gt;{{ ev }}&lt;/item&gt;</line><line number="48">      {% endfor %}</line><line number="49">    &lt;/evolutivity&gt;</line><line number="50">  &lt;/project_instructions&gt;</line><line number="51" /><line number="52">  &lt;project_structure&gt;</line><line number="53">    {{ code_structure | safe }}</line><line number="54">  &lt;/project_structure&gt;</line><line number="55" /><line number="56">  &lt;codebase_context&gt;</line><line number="57">    &lt;files&gt;</line><line number="58">    {% for f in files_info %}</line><line number="59">      &lt;file&gt;</line><line number="60">        &lt;path&gt;{{ f.find('path').text.strip() }}&lt;/path&gt;</line><line number="61">        &lt;description&gt;{{ f.find('description').text.strip() }}&lt;/description&gt;</line><line number="62">      &lt;/file&gt;</line><line number="63">    {% endfor %}</line><line number="64">    &lt;/files&gt;</line><line number="65">  &lt;/codebase_context&gt;</line><line number="66" /><line number="67">  &lt;full_code_context&gt;</line><line number="68">    &lt;files&gt;</line><line number="69">    {% for file_item in code_files %}</line><line number="70">      &lt;file&gt;</line><line number="71">        &lt;path&gt;{{ file_item.path }}&lt;/path&gt;</line><line number="72">        &lt;language&gt;{{ file_item.language }}&lt;/language&gt;</line><line number="73">        &lt;lines&gt;</line><line number="74">          {% for line in file_item.lines %}</line><line number="75">          &lt;line number="{{ line.number }}"&gt;{{ line.text }}&lt;/line&gt;</line><line number="76">          {% endfor %}</line><line number="77">        &lt;/lines&gt;</line><line number="78">      &lt;/file&gt;</line><line number="79">    {% endfor %}</line><line number="80">    &lt;/files&gt;</line><line number="81">  &lt;/full_code_context&gt;</line><line number="82" /><line number="83">  &lt;format&gt;</line><line number="84">    &lt;selected&gt;{{ chosen_format }}&lt;/selected&gt;</line><line number="85">    &lt;instructions&gt;</line><line number="86">      {% for instr in format_instructions %}</line><line number="87">      &lt;instruction&gt;{{ instr }}&lt;/instruction&gt;</line><line number="88">      {% endfor %}</line><line number="89">    &lt;/instructions&gt;</line><line number="90">    &lt;examples&gt;</line><line number="91">      {% for ex in format_examples %}</line><line number="92">      &lt;example&gt;{{ ex }}&lt;/example&gt;</line><line number="93">      {% endfor %}</line><line number="94">    &lt;/examples&gt;</line><line number="95">  &lt;/format&gt;</line><line number="96" /><line number="97">  &lt;request&gt;</line><line number="98">    {{ request }}</line><line number="99">  &lt;/request&gt;</line><line number="100">&lt;/prompt&gt;</line><line number="101" /></code></file><file path="config/final_request.yaml"><code language="yaml"><line number="1">final_request: "Finalement je veux separer le fichier de config user et le fichier project instruction + codebase context. </line><line number="2">donne le code complet pour faire en sorte que la modification soit bien prise en compte"</line></code></file><file path="config/user_config.yaml"><code language="yaml"><line number="1">source_directory: "."</line><line number="2">exclude_patterns:</line><line number="3">  - data</line><line number="4">  - .git</line><line number="5">  - .github</line><line number="6">  - .vscode</line><line number="7">  - .idea</line><line number="8">  - .husky</line><line number="9">  - venv</line><line number="10">  - node_modules</line><line number="11">  - dist</line><line number="12">  - build</line><line number="13">  - coverage</line><line number="14">  - .cache</line><line number="15">  - out</line><line number="16">  - "*.log"</line><line number="17">  - ".DS_Store"</line><line number="18">  - "Thumbs.db"</line><line number="19">  - ".env"</line><line number="20">  - ".env.*"</line><line number="21">  - "yarn.lock"</line><line number="22">  - "package-lock.json"</line><line number="23">  - "*.tmp"</line><line number="24">  - "*.bak"</line><line number="25">  - "*.swp"</line><line number="26" /></code></file><file path="config/formats/xml.xml"><code language="none"><line number="1">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</line><line number="2">&lt;format&gt;</line><line number="3">  &lt;instructions&gt;</line><line number="4">    &lt;instruction&gt;Use XML tags to structure your response.&lt;/instruction&gt;</line><line number="5">    &lt;instruction&gt;Use &amp;lt;code&amp;gt; elements for code samples.&lt;/instruction&gt;</line><line number="6">  &lt;/instructions&gt;</line><line number="7">  &lt;examples&gt;</line><line number="8">    &lt;example&gt;&amp;lt;example&amp;gt;&lt;/example&gt;</line><line number="9">    &lt;example&gt;  &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;&lt;/example&gt;</line><line number="10">    &lt;example&gt;  &amp;lt;list&amp;gt;&lt;/example&gt;</line><line number="11">    &lt;example&gt;    &amp;lt;item&amp;gt;Bullet point&amp;lt;/item&amp;gt;&lt;/example&gt;</line><line number="12">    &lt;example&gt;  &amp;lt;/list&amp;gt;&lt;/example&gt;</line><line number="13">    &lt;example&gt;&amp;lt;/example&amp;gt;&lt;/example&gt;</line><line number="14">  &lt;/examples&gt;</line><line number="15">&lt;/format&gt;</line><line number="16" /></code></file><file path="config/formats/diff.xml"><code language="none"><line number="1">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</line><line number="2">&lt;format&gt;</line><line number="3">  &lt;instructions&gt;</line><line number="4">    &lt;instruction&gt;Provide all code changes as a unified diff (patch) format.&lt;/instruction&gt;</line><line number="5">    &lt;instruction&gt;Include all modifications for all files in a single ```diff code block.&lt;/instruction&gt;</line><line number="6">    &lt;instruction&gt;Do not provide explanations outside the diff code block.&lt;/instruction&gt;</line><line number="7">  &lt;/instructions&gt;</line><line number="8">  &lt;examples&gt;</line><line number="9">    &lt;example&gt;```diff&lt;/example&gt;</line><line number="10">    &lt;example&gt;--- a/path/to/original/file.js&lt;/example&gt;</line><line number="11">    &lt;example&gt;+++ b/path/to/original/file.js&lt;/example&gt;</line><line number="12">    &lt;example&gt;@@ -10,7 +10,7 @@&lt;/example&gt;</line><line number="13">    &lt;example&gt;-old line&lt;/example&gt;</line><line number="14">    &lt;example&gt;+new line&lt;/example&gt;</line><line number="15">    &lt;example&gt;```&lt;/example&gt;</line><line number="16">  &lt;/examples&gt;</line><line number="17">&lt;/format&gt;</line><line number="18" /></code></file><file path="config/formats/none.xml"><code language="none"><line number="1">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</line><line number="2">&lt;format&gt;</line><line number="3">  &lt;instructions&gt;</line><line number="4">    &lt;instruction&gt;No specific formatting.&lt;/instruction&gt;</line><line number="5">  &lt;/instructions&gt;</line><line number="6">  &lt;examples&gt;</line><line number="7">    &lt;example&gt;Just plain text without special formatting.&lt;/example&gt;</line><line number="8">  &lt;/examples&gt;</line><line number="9">&lt;/format&gt;</line><line number="10" /></code></file><file path="config/formats/markdown.xml"><code language="none"><line number="1">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</line><line number="2">&lt;format&gt;</line><line number="3">  &lt;instructions&gt;</line><line number="4">    &lt;instruction&gt;Use Markdown syntax.&lt;/instruction&gt;</line><line number="5">    &lt;instruction&gt;Include code blocks with ```language for code samples.&lt;/instruction&gt;</line><line number="6">  &lt;/instructions&gt;</line><line number="7">  &lt;examples&gt;</line><line number="8">    &lt;example&gt;**Example (Markdown)**&lt;/example&gt;</line><line number="9">    &lt;example&gt;```markdown&lt;/example&gt;</line><line number="10">    &lt;example&gt;# Title&lt;/example&gt;</line><line number="11">    &lt;example&gt;- Bullet point&lt;/example&gt;</line><line number="12">    &lt;example&gt;```&lt;/example&gt;</line><line number="13">  &lt;/examples&gt;</line><line number="14">&lt;/format&gt;</line><line number="15" /></code></file><file path="config/formats/json.xml"><code language="none"><line number="1">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</line><line number="2">&lt;format&gt;</line><line number="3">  &lt;instructions&gt;</line><line number="4">    &lt;instruction&gt;Use JSON formatting.&lt;/instruction&gt;</line><line number="5">    &lt;instruction&gt;Present keys and values in a JSON structure.&lt;/instruction&gt;</line><line number="6">  &lt;/instructions&gt;</line><line number="7">  &lt;examples&gt;</line><line number="8">    &lt;example&gt;{&lt;/example&gt;</line><line number="9">    &lt;example&gt;"title": "Title",&lt;/example&gt;</line><line number="10">    &lt;example&gt;"items": ["Bullet point"]&lt;/example&gt;</line><line number="11">    &lt;example&gt;}&lt;/example&gt;</line><line number="12">  &lt;/examples&gt;</line><line number="13">&lt;/format&gt;</line><line number="14" /></code></file></code_context>