<?xml version="1.0" encoding="UTF-8"?>
<prompt>
  <project_instructions>
    <project_name>Immersive Try-On Kiosk</project_name>
    <objectives>
      
      <objective>Provide an immersive and fluent user experience to virtually try on clothing.</objective>
      
      <objective>Ensure a complete workflow: from initial photo capture to generating multiple try-on images.</objective>
      
      <objective>Facilitate easy addition of new clothing categories, items, and languages.</objective>
      
    </objectives>
    <code_conventions>
      <language_stack>
        <frontend>React (ESModules, functional components)</frontend>
        <backend>Node.js / Express</backend>
      </language_stack>
      <directories_structure>
        <frontend>src/components, src/pages, src/services, src/styles</frontend>
        <backend>src/routes, src/controllers, src=models, src=services</backend>
      </directories_structure>
      <coding_style>
        
        <rule>Follow ES6 conventions</rule>
        
        <rule>Write clean, well-commented, and readable code</rule>
        
        <rule>Separate business logic from presentation</rule>
        
        <rule>Use hooks and context for state management if necessary</rule>
        
      </coding_style>
    </code_conventions>
    <privacy_and_legal>
      
      <item>Obtain explicit consent before capturing and saving photos</item>
      
      <item>Save each session and its associated images in the database</item>
      
      <item>No reuse of images outside the current session</item>
      
    </privacy_and_legal>
    <performance_and_architecture>
      
      <item>Image generation should take between 5s and 1min max</item>
      
      <item>Only one user session at a time</item>
      
      <item>Maintain a clean, modular, and maintainable codebase</item>
      
    </performance_and_architecture>
    <ux_guidelines>
      
      <item>Fullscreen interface without global scroll</item>
      
      <item>Smooth navigation, visual and audio feedback</item>
      
      <item>Large buttons, clear text</item>
      
      <item>On-the-fly language switching</item>
      
      <item>Scrollable sidebars for history and item selection</item>
      
    </ux_guidelines>
    <advertising>
      
      <item>Display a non-intrusive ad during image generation</item>
      
    </advertising>
    <evolutivity>
      
      <item>Add new categories, items, and languages easily</item>
      
      <item>Maintain a code structure that supports future extensions</item>
      
    </evolutivity>
  </project_instructions>

  <project_structure>
    <?xml version='1.0' encoding='utf-8'?>
<code_structure><file>README.md</file><file>run_full_process.sh</file><file>projet_instruction.md</file><file>scripts/generate_prompt.py</file><file>scripts/generate_structure.py</file><file>templates/prompt_template.xml.jinja2</file><file>config/final_request.yaml</file><file>config/user_config.yaml</file><file>config/formats/xml.xml</file><file>config/formats/diff.xml</file><file>config/formats/none.xml</file><file>config/formats/markdown.xml</file><file>config/formats/json.xml</file></code_structure>
  </project_structure>

  <codebase_context>
    <files>
    
      <file>
        <path>frontend/src/pages/Home.js</path>
        <description>Displays webcam feed, 'Let's Play' button, and language switcher at startup.</description>
      </file>
    
      <file>
        <path>frontend/src/pages/ConsentModal.js</path>
        <description>Handles legal consent before taking and saving photos.</description>
      </file>
    
      <file>
        <path>frontend/src/pages/TutorialAndCountdown.js</path>
        <description>Shows a countdown and tutorial overlay to guide user positioning before photo capture.</description>
      </file>
    
      <file>
        <path>frontend/src/pages/PhotoValidation.js</path>
        <description>Displays the captured photo, allowing confirmation or retaking.</description>
      </file>
    
      <file>
        <path>frontend/src/pages/MainScreen.js</path>
        <description>Main interface after initial photo validation, shows selected image, history of generated images, and item/category selection.</description>
      </file>
    
      <file>
        <path>frontend/src/components/LanguageSwitcher.js</path>
        <description>Allows user to switch languages at any time.</description>
      </file>
    
      <file>
        <path>frontend/src/components/CategorySelector.js</path>
        <description>Displays clothing categories and triggers a modal for item selection.</description>
      </file>
    
      <file>
        <path>frontend/src/components/ClothesModal.js</path>
        <description>Transparent modal listing available items for the selected category.</description>
      </file>
    
      <file>
        <path>frontend/src/services/api.js</path>
        <description>Handles communication with backend (Node.js/Express) for image saving and retrieval.</description>
      </file>
    
      <file>
        <path>backend/src/routes/sessionRoutes.js</path>
        <description>Defines routes for session creation, photo saving, and image retrieval.</description>
      </file>
    
      <file>
        <path>backend/src/controllers/sessionController.js</path>
        <description>Implements business logic for managing sessions and photos.</description>
      </file>
    
      <file>
        <path>backend/src/services/imageGeneration.js</path>
        <description>Interfaces with the image generation engine (AI) to create try-on outputs.</description>
      </file>
    
    </files>
  </codebase_context>

  <full_code_context>
    <files>
    
      <file>
        <path>README.md</path>
        <language>markdown</language>
        <lines>
          
          <line number="1"># AI Prompt Tool</line>
          
          <line number="2"></line>
          
          <line number="3">## Project Overview</line>
          
          <line number="4"></line>
          
          <line number="5">The AI Prompt Tool is a sophisticated system designed to generate structured prompts for AI models. It analyzes a given codebase, extracts relevant information, and creates a comprehensive prompt that includes project instructions, structure, context, and specific requests.</line>
          
          <line number="6"></line>
          
          <line number="7">## Project Structure</line>
          
          <line number="8"></line>
          
          <line number="9">The project is organized into the following main components:</line>
          
          <line number="10"></line>
          
          <line number="11">- `config/`: Contains configuration files for project instructions, codebase context, settings, and formats.</line>
          
          <line number="12">- `data/`: Stores generated data such as code structure, context, and the final prompt.</line>
          
          <line number="13">- `scripts/`: Houses Python scripts for generating project structure and prompts.</line>
          
          <line number="14">- `templates/`: Contains the Jinja2 template for the final prompt.</line>
          
          <line number="15"></line>
          
          <line number="16">Key files:</line>
          
          <line number="17">- `run_full_process.sh`: Main script to execute the entire prompt generation process.</line>
          
          <line number="18">- `scripts/generate_structure.py`: Generates the project structure and code context.</line>
          
          <line number="19">- `scripts/generate_prompt.py`: Creates the final prompt using the gathered information.</line>
          
          <line number="20">- `templates/prompt_template.jinja2`: Template for structuring the final prompt.</line>
          
          <line number="21">- `config/settings.yaml`: Contains settings such as the source directory.</line>
          
          <line number="22">- `config/final_request.txt`: Contains the specific request for the AI model.</line>
          
          <line number="23"></line>
          
          <line number="24">## How It Works</line>
          
          <line number="25"></line>
          
          <line number="26">1. The `run_full_process.sh` script orchestrates the entire process:</line>
          
          <line number="27">   - Checks for required directories and files.</line>
          
          <line number="28">   - Reads the source directory from settings.</line>
          
          <line number="29">   - Runs `generate_structure.py` to analyze the project structure.</line>
          
          <line number="30">   - Executes `generate_prompt.py` to create the final prompt.</line>
          
          <line number="31"></line>
          
          <line number="32">2. `generate_structure.py`:</line>
          
          <line number="33">   - Scans the project directory specified in `config/settings.yaml`.</line>
          
          <line number="34">   - Generates `data/code_structure.json`: A JSON representation of the project structure.</line>
          
          <line number="35">   - Creates `data/code_context.md`: A Markdown file containing relevant code snippets and context.</line>
          
          <line number="36"></line>
          
          <line number="37">3. `generate_prompt.py`:</line>
          
          <line number="38">   - Loads configuration files from the `config/` directory.</line>
          
          <line number="39">   - Formats the loaded data into structured sections.</line>
          
          <line number="40">   - Uses the Jinja2 template to render the final prompt.</line>
          
          <line number="41">   - Outputs the generated prompt to stdout, which is then redirected to `data/final_prompt.txt`.</line>
          
          <line number="42"></line>
          
          <line number="43">4. The final prompt includes:</line>
          
          <line number="44">   - Project instructions</line>
          
          <line number="45">   - Project structure</line>
          
          <line number="46">   - Codebase context</line>
          
          <line number="47">   - Full code context</line>
          
          <line number="48">   - Expected response format</line>
          
          <line number="49">   - Specific request (from `config/final_request.txt`)</line>
          
          <line number="50"></line>
          
          <line number="51">## Usage</line>
          
          <line number="52"></line>
          
          <line number="53">1. Ensure all required directories and configuration files are present.</line>
          
          <line number="54">2. Customize the configuration files in the `config/` directory as needed.</line>
          
          <line number="55">3. Run the main script:</line>
          
          <line number="56">   ```</line>
          
          <line number="57">   ./run_full_process.sh</line>
          
          <line number="58">   ```</line>
          
          <line number="59">4. When prompted, confirm that you want to proceed with scanning the project source directory.</line>
          
          <line number="60">5. The generated prompt will be saved in `data/final_prompt.txt`.</line>
          
          <line number="61">6. Use the content of `data/final_prompt.txt` with your AI assistant or model.</line>
          
          <line number="62"></line>
          
          <line number="63">## Customization</line>
          
          <line number="64"></line>
          
          <line number="65">- Modify `config/project_instructions.yaml` to update project-specific instructions.</line>
          
          <line number="66">- Edit `config/codebase_context.yaml` to provide context for key files in your project.</line>
          
          <line number="67">- Adjust format files in `config/formats/` to specify the desired format for AI responses.</line>
          
          <line number="68">- Update `config/settings.yaml` to change the source directory or other settings.</line>
          
          <line number="69">- Modify `config/final_request.txt` to customize the specific request for the AI model.</line>
          
          <line number="70"></line>
          
          <line number="71">## Note</line>
          
          <line number="72"></line>
          
          <line number="73">This tool is designed to create structured and context-rich prompts for AI models, particularly useful for code analysis, refactoring suggestions, or answering specific questions about a codebase. The generated prompt provides a comprehensive overview of the project, allowing the AI to give more accurate and relevant responses.</line>
          
          <line number="74"></line>
          
          <line number="75">After generating the prompt, the script will display the character count and an estimated token count for the generated prompt, which can be useful for managing token limits in AI models.</line>
          
          <line number="76"></line>
          
        </lines>
      </file>
    
      <file>
        <path>run_full_process.sh</path>
        <language>none</language>
        <lines>
          
          <line number="1">#!/usr/bin/env bash</line>
          
          <line number="2"></line>
          
          <line number="3">set -e</line>
          
          <line number="4"></line>
          
          <line number="5">echo "Checking required directories..."</line>
          
          <line number="6">REQUIRED_DIRS=("config" "output" "templates" "scripts")</line>
          
          <line number="7">for d in "${REQUIRED_DIRS[@]}"; do</line>
          
          <line number="8">    if [ ! -d "$d" ]; then</line>
          
          <line number="9">        echo "Error: Directory '$d' not found."</line>
          
          <line number="10">        exit 1</line>
          
          <line number="11">    fi</line>
          
          <line number="12">done</line>
          
          <line number="13"></line>
          
          <line number="14">if [ ! -f "config/user_config.yaml" ]; then</line>
          
          <line number="15">    echo "Error: 'config/user_config.yaml' not found."</line>
          
          <line number="16">    exit 1</line>
          
          <line number="17">fi</line>
          
          <line number="18"></line>
          
          <line number="19">if [ ! -f "config/final_request.yaml" ]; then</line>
          
          <line number="20">    echo "Error: 'config/final_request.yaml' not found."</line>
          
          <line number="21">    exit 1</line>
          
          <line number="22">fi</line>
          
          <line number="23"></line>
          
          <line number="24">if [ ! -d "config/formats" ]; then</line>
          
          <line number="25">    echo "Error: 'config/formats' directory not found."</line>
          
          <line number="26">    exit 1</line>
          
          <line number="27">fi</line>
          
          <line number="28"></line>
          
          <line number="29">if [ ! -f "templates/prompt_template.xml.jinja2" ]; then</line>
          
          <line number="30">    echo "Error: Template file 'prompt_template.xml.jinja2' not found."</line>
          
          <line number="31">    exit 1</line>
          
          <line number="32">fi</line>
          
          <line number="33"></line>
          
          <line number="34">if [ ! -f "scripts/generate_structure.py" ] || [ ! -f "scripts/generate_prompt.py" ]; then</line>
          
          <line number="35">    echo "Error: Required scripts not found."</line>
          
          <line number="36">    exit 1</line>
          
          <line number="37">fi</line>
          
          <line number="38"></line>
          
          <line number="39">ABS_SOURCE_DIR=$(pwd)</line>
          
          <line number="40">echo "We are about to scan the project source directory at: $ABS_SOURCE_DIR"</line>
          
          <line number="41"></line>
          
          <line number="42">echo "Running generate_structure.py..."</line>
          
          <line number="43">python3 scripts/generate_structure.py</line>
          
          <line number="44"></line>
          
          <line number="45">if [ ! -f "output/code_structure.xml" ]; then</line>
          
          <line number="46">    echo "Error: 'output/code_structure.xml' not found after running generate_structure.py."</line>
          
          <line number="47">    exit 1</line>
          
          <line number="48">fi</line>
          
          <line number="49"></line>
          
          <line number="50">if [ ! -f "output/code_context.xml" ]; then</line>
          
          <line number="51">    echo "Warning: 'output/code_context.xml' not found. Possibly no files included."</line>
          
          <line number="52">fi</line>
          
          <line number="53"></line>
          
          <line number="54">echo "Formats disponibles :"</line>
          
          <line number="55">for file in config/formats/*.xml; do</line>
          
          <line number="56">    base=$(basename "$file" .xml)</line>
          
          <line number="57">    echo "- $base"</line>
          
          <line number="58">done</line>
          
          <line number="59"></line>
          
          <line number="60">read -p "Veuillez saisir un format : " USER_FORMAT</line>
          
          <line number="61">USER_FORMAT=$(echo "$USER_FORMAT" | tr '[:upper:]' '[:lower:]')</line>
          
          <line number="62"></line>
          
          <line number="63">if [ ! -f "config/formats/$USER_FORMAT.xml" ]; then</line>
          
          <line number="64">    echo "Erreur : Le format '$USER_FORMAT' n'est pas supporté."</line>
          
          <line number="65">    exit 1</line>
          
          <line number="66">fi</line>
          
          <line number="67"></line>
          
          <line number="68">echo "Running generate_prompt.py..."</line>
          
          <line number="69">python3 scripts/generate_prompt.py "$USER_FORMAT" | tee output/final_prompt.xml</line>
          
          <line number="70"></line>
          
          <line number="71">if [ ! -f "output/final_prompt.xml" ]; then</line>
          
          <line number="72">    echo "Error: 'output/final_prompt.xml' was not created."</line>
          
          <line number="73">    exit 1</line>
          
          <line number="74">fi</line>
          
          <line number="75"></line>
          
          <line number="76">CHAR_COUNT=$(wc -m < output/final_prompt.xml | tr -d '[:space:]')</line>
          
          <line number="77">TOKEN_ESTIMATE=$((CHAR_COUNT / 4))</line>
          
          <line number="78"></line>
          
          <line number="79">echo "----------------------------------------"</line>
          
          <line number="80">echo "Prompt successfully generated and saved to output/final_prompt.xml"</line>
          
          <line number="81">echo "Character count: $CHAR_COUNT"</line>
          
          <line number="82">echo "Estimated tokens (approx): $TOKEN_ESTIMATE"</line>
          
          <line number="83">echo "----------------------------------------"</line>
          
          <line number="84">echo "Process completed successfully."</line>
          
          <line number="85"></line>
          
        </lines>
      </file>
    
      <file>
        <path>projet_instruction.md</path>
        <language>markdown</language>
        <lines>
          
          <line number="1">**Objectif du projet :**</line>
          
          <line number="2"></line>
          
          <line number="3">Créer une borne tactile pour magasins physiques (ex. : Décathlon), permettant aux clients d’essayer virtuellement des vêtements via une technologie de "try-on". L’utilisateur suit un parcours fluide, de la capture d’une photo à la génération des résultats, dans une interface immersive inspirée d’un miroir connecté, avec possibilité de changer la langue de l’interface et de réutiliser des images déjà générées pour de nouveaux essais.</line>
          
          <line number="4"></line>
          
          <line number="5">---</line>
          
          <line number="6"></line>
          
          <line number="7">**Gestion multilingue** :</line>
          
          <line number="8"></line>
          
          <line number="9">- L’interface est conçue pour supporter plusieurs langues.</line>
          
          <line number="10">- Un système de gestion des langues (fichiers de traduction, variables dynamiques, etc.) doit être en place.</line>
          
          <line number="11">- Un indicateur (drapeau) visible en haut de l’interface permet de changer facilement la langue.</line>
          
          <line number="12">- Le changement de langue prend effet immédiatement sur l’ensemble de l’interface.</line>
          
          <line number="13"></line>
          
          <line number="14">---</line>
          
          <line number="15"></line>
          
          <line number="16">**Parcours utilisateur et écrans :**</line>
          
          <line number="17"></line>
          
          <line number="18">**1. Écran d’accueil (avant la session) :**</line>
          
          <line number="19"></line>
          
          <line number="20">- Affiche le flux vidéo de la webcam en plein écran, comme un miroir connecté.</line>
          
          <line number="21">- Un bouton "Let’s Play" est superposé, ainsi qu’un cadre pointillé pour aider l’utilisateur à se positionner.</line>
          
          <line number="22">- Le drapeau indiquant la langue actuelle est visible en haut, permettant de changer la langue.</line>
          
          <line number="23">- L’utilisateur clique sur "Let’s Play" pour lancer le processus.</line>
          
          <line number="24"></line>
          
          <line number="25">**2. Modal de consentement légal :**</line>
          
          <line number="26"></line>
          
          <line number="27">- Une modal apparaît, demandant à l’utilisateur d’accepter les conditions d’utilisation et la sauvegarde de ses photos.</line>
          
          <line number="28">- S’il accepte, on passe à l’étape suivante. S’il refuse, retour à l’écran d’accueil.</line>
          
          <line number="29"></line>
          
          <line number="30">**3. Décompte et tutoriel de placement :**</line>
          
          <line number="31"></line>
          
          <line number="32">- Un décompte de 10s démarre après l’acceptation.</line>
          
          <line number="33">- Pendant les 5 premières secondes, un modal semi-transparent affiche des tutoriels visuels et textuels pour aider l’utilisateur à se positionner.</line>
          
          <line number="34">- Passées ces 5s, le modal disparaît, laissant uniquement le décompte.</line>
          
          <line number="35">- À 0s, la photo initiale est prise.</line>
          
          <line number="36"></line>
          
          <line number="37">**4. Modal de validation de la photo :**</line>
          
          <line number="38"></line>
          
          <line number="39">- La photo capturée est affichée en grand.</line>
          
          <line number="40">- L’utilisateur peut confirmer la photo ou la reprendre (réinitialisant le décompte et le tutoriel).</line>
          
          <line number="41">- Si confirmée, la session démarre et l’image initiale est sauvegardée en base de données.</line>
          
          <line number="42"></line>
          
          <line number="43">**5. Écran principal (après validation de la photo initiale) :**</line>
          
          <line number="44"></line>
          
          <line number="45">- La vue webcam plein écran est remplacée par l’affichage de la photo sélectionnée. La webcam n’est plus affichée après cette étape.</line>
          
          <line number="46">- À gauche, une barre verticale affiche l’historique :</line>
          
          <line number="47">    - La photo initiale en haut.</line>
          
          <line number="48">    - Les nouvelles photos générées seront ajoutées juste en dessous de la photo initiale, créant une liste verticale. Chaque nouvelle génération s’ajoute directement sous l’image initiale, en gardant l’ordre chronologique (la plus récente se retrouve immédiatement sous l’originale).</line>
          
          <line number="49">- L’utilisateur peut cliquer sur n’importe quelle photo de l’historique pour la sélectionner. **La photo sélectionnée (qu’elle soit l’originale ou une image générée précédemment) est utilisée comme base pour la prochaine génération.** Ainsi, l’utilisateur peut faire un try-on à partir de n’importe quelle image déjà présente dans l’historique.</line>
          
          <line number="50">- En haut, une barre horizontale présente les catégories de vêtements (T-shirts, Jeans, Pulls, etc.) ainsi que le drapeau de langue.</line>
          
          <line number="51">- Cliquer sur une catégorie ouvre un modal transparent affichant les différents vêtements de cette catégorie.</line>
          
          <line number="52">- Le modal transparent laisse voir l’image sélectionnée en fond.</line>
          
          <line number="53">- En cliquant sur un vêtement, la génération du try-on se lance à partir de l’image actuellement sélectionnée.</line>
          
          <line number="54"></line>
          
          <line number="55">**6. Écran de génération (progression) :**</line>
          
          <line number="56"></line>
          
          <line number="57">- Une barre de progression s’affiche, indiquant l’état d’avancement (5s à 1min max).</line>
          
          <line number="58">- Une zone publicitaire est visible sous la barre de progression.</line>
          
          <line number="59">- Une fois la génération terminée, l’écran principal réapparaît.</line>
          
          <line number="60"></line>
          
          <line number="61">**7. Retour à l’écran principal (post-génération) :**</line>
          
          <line number="62"></line>
          
          <line number="63">- La nouvelle image générée est ajoutée juste en dessous de la photo initiale dans l’historique et est automatiquement sélectionnée.</line>
          
          <line number="64">- L’utilisateur peut de nouveau choisir une autre catégorie, un autre vêtement, ou changer de langue à tout moment.</line>
          
          <line number="65"></line>
          
          <line number="66">**8. Fin de session :**</line>
          
          <line number="67"></line>
          
          <line number="68">- Un bouton "Terminer la session" ouvre un modal :</line>
          
          <line number="69">    - L’utilisateur peut saisir un numéro de téléphone pour recevoir par SMS toutes les images générées.</line>
          
          <line number="70">    - Un bouton "Confirmer" envoie les images si un numéro est fourni, sinon termine simplement la session.</line>
          
          <line number="71">    - Un bouton "Retour" permet d’annuler la fin de session et de continuer.</line>
          
          <line number="72">    - Un message de remerciement s’affiche.</line>
          
          <line number="73">- Une fois la session terminée, retour à l’écran d’accueil avec la webcam, prêt pour un nouvel utilisateur.</line>
          
          <line number="74"></line>
          
          <line number="75">---</line>
          
          <line number="76"></line>
          
          <line number="77">**Contraintes et exigences :**</line>
          
          <line number="78"></line>
          
          <line number="79">- **Affichage pleine page** :</line>
          
          <line number="80">    - Toujours en fullscreen sans scroll global.</line>
          
          <line number="81">    - Les barres d’historique et de sélection de vêtements sont scrollables dans leurs zones dédiées.</line>
          
          <line number="82">- **Vue webcam immersive** :</line>
          
          <line number="83">    - Le flux de la webcam occupe 100% de l’écran **uniquement sur l’écran d’accueil et jusqu’à la prise de la photo initiale**.</line>
          
          <line number="84">    - Après la validation de la photo initiale, la webcam disparaît et le fullscreen est réservé à l’affichage de l’image sélectionnée (initiale ou générée).</line>
          
          <line number="85">- **Confidentialité** :</line>
          
          <line number="86">    - Toutes les photos sont sauvegardées en base de données.</line>
          
          <line number="87">    - Consentement explicite avant la capture.</line>
          
          <line number="88">    - Les photos ne sont utilisées que dans la session courante, identifiée par un UID unique.</line>
          
          <line number="89">- **Gestion des sessions** :</line>
          
          <line number="90">    - Chaque nouvelle photo initiale crée une nouvelle session.</line>
          
          <line number="91">    - Données de sessions précédentes non accessibles ensuite.</line>
          
          <line number="92">- **Performances** :</line>
          
          <line number="93">    - Génération entre 5s et 1min.</line>
          
          <line number="94">    - Une seule session utilisateur à la fois.</line>
          
          <line number="95">- **Architecture propre** :</line>
          
          <line number="96">    - ESModules, code organisé en `components/`, `pages/`, `services/`, `styles/`.</line>
          
          <line number="97">    - Commentaires clairs.</line>
          
          <line number="98">- **Publicité pendant la génération** :</line>
          
          <line number="99">    - Affichage sous la barre de progression, non intrusive.</line>
          
          <line number="100">- **Expérience utilisateur fluide** :</line>
          
          <line number="101">    - Feedbacks visuels/sonores.</line>
          
          <line number="102">    - Boutons grands et adaptés.</line>
          
          <line number="103">    - Gestion multilingue à tout moment.</line>
          
          <line number="104">- **Évolutivité** :</line>
          
          <line number="105">    - Ajout facile de nouvelles catégories, vêtements, langues, fonctionnalités.</line>
          
          <line number="106"></line>
          
          <line number="107">---</line>
          
          <line number="108"></line>
          
          <line number="109">**Résumé :**</line>
          
          <line number="110"></line>
          
          <line number="111">Ce projet fournit une expérience immersive de try-on virtuel avec prise de photo initiale via une webcam, sélection de vêtements par catégorie, génération d’images à partir de l’image initiale ou de toute image déjà générée, et gestion multilingue intégrée. L’interface évolue du flux webcam au début à l’affichage des images sélectionnées ensuite, permet la fin de session avec envoi par SMS, et respecte les contraintes de performances, de confidentialité et d’ergonomie.</line>
          
        </lines>
      </file>
    
      <file>
        <path>scripts/generate_prompt.py</path>
        <language>python</language>
        <lines>
          
          <line number="1">#!/usr/bin/env python3</line>
          
          <line number="2">import os</line>
          
          <line number="3">import sys</line>
          
          <line number="4">import yaml</line>
          
          <line number="5">import xml.etree.ElementTree as ET</line>
          
          <line number="6">from jinja2 import Environment, FileSystemLoader</line>
          
          <line number="7"></line>
          
          <line number="8">def load_yaml_config():</line>
          
          <line number="9">    with open("config/user_config.yaml", "r", encoding="utf-8") as f:</line>
          
          <line number="10">        data = yaml.safe_load(f)</line>
          
          <line number="11">    return data</line>
          
          <line number="12"></line>
          
          <line number="13">def load_final_request():</line>
          
          <line number="14">    with open("config/final_request.yaml", "r", encoding="utf-8") as f:</line>
          
          <line number="15">        data = yaml.safe_load(f)</line>
          
          <line number="16">    return data.get("final_request", "Please explain the codebase.")</line>
          
          <line number="17"></line>
          
          <line number="18">def parse_code_context(root):</line>
          
          <line number="19">    files_data = []</line>
          
          <line number="20">    for f in root.findall("./file"):</line>
          
          <line number="21">        path = f.get("path", "")</line>
          
          <line number="22">        code_elem = f.find("./code")</line>
          
          <line number="23">        language = code_elem.get("language", "none") if code_elem is not None else "none"</line>
          
          <line number="24">        lines_data = []</line>
          
          <line number="25">        if code_elem is not None:</line>
          
          <line number="26">            for line_elem in code_elem.findall("./line"):</line>
          
          <line number="27">                number = line_elem.get("number", "0")</line>
          
          <line number="28">                text = line_elem.text if line_elem.text else ""</line>
          
          <line number="29">                lines_data.append({'number': number, 'text': text})</line>
          
          <line number="30">        files_data.append({</line>
          
          <line number="31">            'path': path,</line>
          
          <line number="32">            'language': language,</line>
          
          <line number="33">            'lines': lines_data</line>
          
          <line number="34">        })</line>
          
          <line number="35">    return files_data</line>
          
          <line number="36"></line>
          
          <line number="37">def main():</line>
          
          <line number="38">    if len(sys.argv) < 2:</line>
          
          <line number="39">        print("Error: format argument missing.")</line>
          
          <line number="40">        sys.exit(1)</line>
          
          <line number="41"></line>
          
          <line number="42">    chosen_format = sys.argv[1].lower()</line>
          
          <line number="43">    data = load_yaml_config()</line>
          
          <line number="44">    final_request = load_final_request()</line>
          
          <line number="45"></line>
          
          <line number="46">    # Extraire les infos du fichier YAML</line>
          
          <line number="47">    project_instructions = data.get("project_instructions", {})</line>
          
          <line number="48">    codebase_context = data.get("codebase_context", [])</line>
          
          <line number="49"></line>
          
          <line number="50">    # Charger contextes générés</line>
          
          <line number="51">    code_files = []</line>
          
          <line number="52">    if os.path.exists("output/code_context.xml"):</line>
          
          <line number="53">        root_cc = ET.parse("output/code_context.xml").getroot()</line>
          
          <line number="54">        code_files = parse_code_context(root_cc)</line>
          
          <line number="55"></line>
          
          <line number="56">    code_structure = ""</line>
          
          <line number="57">    if os.path.exists("output/code_structure.xml"):</line>
          
          <line number="58">        with open("output/code_structure.xml", "r", encoding="utf-8") as f:</line>
          
          <line number="59">            code_structure = f.read().strip()</line>
          
          <line number="60"></line>
          
          <line number="61">    # Extraire les données du projet</line>
          
          <line number="62">    pn = project_instructions.get("project_name", "")</line>
          
          <line number="63">    objs = project_instructions.get("objectives", [])</line>
          
          <line number="64">    cc = project_instructions.get("code_conventions", {})</line>
          
          <line number="65">    pl = project_instructions.get("privacy_and_legal", [])</line>
          
          <line number="66">    pa = project_instructions.get("performance_and_architecture", [])</line>
          
          <line number="67">    ux = project_instructions.get("ux_guidelines", [])</line>
          
          <line number="68">    ad = project_instructions.get("advertising", [])</line>
          
          <line number="69">    ev = project_instructions.get("evolutivity", [])</line>
          
          <line number="70"></line>
          
          <line number="71">    # code_conventions détails</line>
          
          <line number="72">    lang_stack = cc.get("language_stack", {})</line>
          
          <line number="73">    dirs_stack = cc.get("directories_structure", {})</line>
          
          <line number="74">    coding_style = cc.get("coding_style", [])</line>
          
          <line number="75"></line>
          
          <line number="76">    frontend_stack = lang_stack.get("frontend", "")</line>
          
          <line number="77">    backend_stack = lang_stack.get("backend", "")</line>
          
          <line number="78">    directories_frontend = dirs_stack.get("frontend", "")</line>
          
          <line number="79">    directories_backend = dirs_stack.get("backend", "")</line>
          
          <line number="80"></line>
          
          <line number="81">    # Construction de files_info comme précédemment</line>
          
          <line number="82">    files_root = ET.Element("files")</line>
          
          <line number="83">    for cf in codebase_context:</line>
          
          <line number="84">        file_elem = ET.SubElement(files_root, "file")</line>
          
          <line number="85">        p = ET.SubElement(file_elem, "path")</line>
          
          <line number="86">        p.text = cf.get("path", "")</line>
          
          <line number="87">        d = ET.SubElement(file_elem, "description")</line>
          
          <line number="88">        d.text = cf.get("description", "")</line>
          
          <line number="89">    files_info = files_root.findall("./file")</line>
          
          <line number="90"></line>
          
          <line number="91">    # Charger les instructions / exemples du format</line>
          
          <line number="92">    format_file = f"config/formats/{chosen_format}.xml"</line>
          
          <line number="93">    if not os.path.exists(format_file):</line>
          
          <line number="94">        print("Format file not found.")</line>
          
          <line number="95">        sys.exit(1)</line>
          
          <line number="96">    format_root = ET.parse(format_file).getroot()</line>
          
          <line number="97"></line>
          
          <line number="98">    def get_list(root, xpath):</line>
          
          <line number="99">        return [e.text.strip() for e in root.findall(xpath)]</line>
          
          <line number="100"></line>
          
          <line number="101">    format_instructions = get_list(format_root, "./instructions/instruction")</line>
          
          <line number="102">    format_examples = get_list(format_root, "./examples/example")</line>
          
          <line number="103"></line>
          
          <line number="104">    env = Environment(loader=FileSystemLoader("templates"))</line>
          
          <line number="105">    template = env.get_template("prompt_template.xml.jinja2")</line>
          
          <line number="106"></line>
          
          <line number="107">    prompt = template.render(</line>
          
          <line number="108">        project_name=pn,</line>
          
          <line number="109">        objectives=objs,</line>
          
          <line number="110">        frontend_stack=frontend_stack,</line>
          
          <line number="111">        backend_stack=backend_stack,</line>
          
          <line number="112">        directories_frontend=directories_frontend,</line>
          
          <line number="113">        directories_backend=directories_backend,</line>
          
          <line number="114">        coding_style=coding_style,</line>
          
          <line number="115">        privacy_and_legal=pl,</line>
          
          <line number="116">        performance_and_arch=pa,</line>
          
          <line number="117">        ux_guidelines=ux,</line>
          
          <line number="118">        advertising=ad,</line>
          
          <line number="119">        evolutivity=ev,</line>
          
          <line number="120">        code_structure=code_structure,</line>
          
          <line number="121">        files_info=files_info,</line>
          
          <line number="122">        code_files=code_files,</line>
          
          <line number="123">        request=final_request,</line>
          
          <line number="124">        chosen_format=chosen_format,</line>
          
          <line number="125">        format_instructions=format_instructions,</line>
          
          <line number="126">        format_examples=format_examples</line>
          
          <line number="127">    )</line>
          
          <line number="128"></line>
          
          <line number="129">    print(prompt)</line>
          
          <line number="130"></line>
          
          <line number="131">if __name__ == "__main__":</line>
          
          <line number="132">    main()</line>
          
          <line number="133"></line>
          
        </lines>
      </file>
    
      <file>
        <path>scripts/generate_structure.py</path>
        <language>python</language>
        <lines>
          
          <line number="1">#!/usr/bin/env python3</line>
          
          <line number="2">import os</line>
          
          <line number="3">import fnmatch</line>
          
          <line number="4">import sys</line>
          
          <line number="5">import yaml</line>
          
          <line number="6">import xml.etree.ElementTree as ET</line>
          
          <line number="7"></line>
          
          <line number="8">def load_settings():</line>
          
          <line number="9">    with open("config/user_config.yaml", "r", encoding="utf-8") as f:</line>
          
          <line number="10">        data = yaml.safe_load(f)</line>
          
          <line number="11">    source_directory = data.get("source_directory", ".")</line>
          
          <line number="12">    exclude_patterns = data.get("exclude_patterns", [])</line>
          
          <line number="13">    return source_directory, exclude_patterns</line>
          
          <line number="14"></line>
          
          <line number="15">def is_excluded(path, exclude_patterns):</line>
          
          <line number="16">    norm_path = path.replace("\\", "/")</line>
          
          <line number="17">    for pattern in exclude_patterns:</line>
          
          <line number="18">        if fnmatch.fnmatch(norm_path, pattern) or pattern in norm_path:</line>
          
          <line number="19">            return True</line>
          
          <line number="20">    return False</line>
          
          <line number="21"></line>
          
          <line number="22">def detect_language(extension):</line>
          
          <line number="23">    lang_map = {</line>
          
          <line number="24">        ".js": "javascript",</line>
          
          <line number="25">        ".jsx": "javascript",</line>
          
          <line number="26">        ".ts": "typescript",</line>
          
          <line number="27">        ".tsx": "typescript",</line>
          
          <line number="28">        ".py": "python",</line>
          
          <line number="29">        ".html": "html",</line>
          
          <line number="30">        ".css": "css",</line>
          
          <line number="31">        ".json": "json",</line>
          
          <line number="32">        ".yaml": "yaml",</line>
          
          <line number="33">        ".yml": "yaml",</line>
          
          <line number="34">        ".md": "markdown"</line>
          
          <line number="35">    }</line>
          
          <line number="36">    return lang_map.get(extension, "")</line>
          
          <line number="37"></line>
          
          <line number="38">def is_too_high_in_hierarchy(source_dir):</line>
          
          <line number="39">    forbidden_paths = ["/", "/home"]</line>
          
          <line number="40">    abs_source = os.path.abspath(source_dir)</line>
          
          <line number="41">    return abs_source in forbidden_paths</line>
          
          <line number="42"></line>
          
          <line number="43">def main():</line>
          
          <line number="44">    source_directory, exclude_patterns = load_settings()</line>
          
          <line number="45"></line>
          
          <line number="46">    abs_source = os.path.abspath(source_directory)</line>
          
          <line number="47">    print(f"About to scan: {abs_source}")</line>
          
          <line number="48"></line>
          
          <line number="49">    if is_too_high_in_hierarchy(source_directory):</line>
          
          <line number="50">        print("Error: The source directory is too high.")</line>
          
          <line number="51">        sys.exit(1)</line>
          
          <line number="52"></line>
          
          <line number="53">    code_structure = ET.Element("code_structure")</line>
          
          <line number="54">    code_context = ET.Element("code_context")</line>
          
          <line number="55"></line>
          
          <line number="56">    if not os.path.exists("output"):</line>
          
          <line number="57">        os.makedirs("output")</line>
          
          <line number="58"></line>
          
          <line number="59">    for root, dirs, files in os.walk(source_directory, topdown=True):</line>
          
          <line number="60">        dirs[:] = [d for d in dirs if not is_excluded(os.path.join(root, d), exclude_patterns)]</line>
          
          <line number="61">        for filename in files:</line>
          
          <line number="62">            full_path = os.path.join(root, filename)</line>
          
          <line number="63">            rel_path = os.path.relpath(full_path, source_directory)</line>
          
          <line number="64">            if is_excluded(rel_path, exclude_patterns):</line>
          
          <line number="65">                continue</line>
          
          <line number="66"></line>
          
          <line number="67">            item = ET.SubElement(code_structure, "file")</line>
          
          <line number="68">            item.text = rel_path</line>
          
          <line number="69"></line>
          
          <line number="70">            _, ext = os.path.splitext(filename)</line>
          
          <line number="71">            code_lang = detect_language(ext)</line>
          
          <line number="72"></line>
          
          <line number="73">            try:</line>
          
          <line number="74">                with open(full_path, "r", encoding="utf-8", errors="ignore") as fc:</line>
          
          <line number="75">                    content = fc.read()</line>
          
          <line number="76">            except Exception as e:</line>
          
          <line number="77">                content = f"Could not read file: {e}"</line>
          
          <line number="78"></line>
          
          <line number="79">            file_elem = ET.SubElement(code_context, "file")</line>
          
          <line number="80">            file_elem.set("path", rel_path)</line>
          
          <line number="81">            code_block = ET.SubElement(file_elem, "code")</line>
          
          <line number="82">            code_block.set("language", code_lang if code_lang else "none")</line>
          
          <line number="83">            lines = content.split('\n')</line>
          
          <line number="84">            for i, line in enumerate(lines, start=1):</line>
          
          <line number="85">                line_elem = ET.SubElement(code_block, "line")</line>
          
          <line number="86">                line_elem.set("number", str(i))</line>
          
          <line number="87">                line_elem.text = line</line>
          
          <line number="88"></line>
          
          <line number="89">    ET.ElementTree(code_structure).write("output/code_structure.xml", encoding="utf-8", xml_declaration=True)</line>
          
          <line number="90">    ET.ElementTree(code_context).write("output/code_context.xml", encoding="utf-8", xml_declaration=True)</line>
          
          <line number="91"></line>
          
          <line number="92">    print("Code structure and context generated successfully.")</line>
          
          <line number="93"></line>
          
          <line number="94">if __name__ == "__main__":</line>
          
          <line number="95">    main()</line>
          
          <line number="96"></line>
          
        </lines>
      </file>
    
      <file>
        <path>templates/prompt_template.xml.jinja2</path>
        <language>none</language>
        <lines>
          
          <line number="1"><?xml version="1.0" encoding="UTF-8"?></line>
          
          <line number="2"><prompt></line>
          
          <line number="3">  <project_instructions></line>
          
          <line number="4">    <project_name>{{ project_name }}</project_name></line>
          
          <line number="5">    <objectives></line>
          
          <line number="6">      {% for obj in objectives %}</line>
          
          <line number="7">      <objective>{{ obj }}</objective></line>
          
          <line number="8">      {% endfor %}</line>
          
          <line number="9">    </objectives></line>
          
          <line number="10">    <code_conventions></line>
          
          <line number="11">      <language_stack></line>
          
          <line number="12">        <frontend>{{ frontend_stack }}</frontend></line>
          
          <line number="13">        <backend>{{ backend_stack }}</backend></line>
          
          <line number="14">      </language_stack></line>
          
          <line number="15">      <directories_structure></line>
          
          <line number="16">        <frontend>{{ directories_frontend }}</frontend></line>
          
          <line number="17">        <backend>{{ directories_backend }}</backend></line>
          
          <line number="18">      </directories_structure></line>
          
          <line number="19">      <coding_style></line>
          
          <line number="20">        {% for rule in coding_style %}</line>
          
          <line number="21">        <rule>{{ rule }}</rule></line>
          
          <line number="22">        {% endfor %}</line>
          
          <line number="23">      </coding_style></line>
          
          <line number="24">    </code_conventions></line>
          
          <line number="25">    <privacy_and_legal></line>
          
          <line number="26">      {% for pl in privacy_and_legal %}</line>
          
          <line number="27">      <item>{{ pl }}</item></line>
          
          <line number="28">      {% endfor %}</line>
          
          <line number="29">    </privacy_and_legal></line>
          
          <line number="30">    <performance_and_architecture></line>
          
          <line number="31">      {% for pa in performance_and_arch %}</line>
          
          <line number="32">      <item>{{ pa }}</item></line>
          
          <line number="33">      {% endfor %}</line>
          
          <line number="34">    </performance_and_architecture></line>
          
          <line number="35">    <ux_guidelines></line>
          
          <line number="36">      {% for ux in ux_guidelines %}</line>
          
          <line number="37">      <item>{{ ux }}</item></line>
          
          <line number="38">      {% endfor %}</line>
          
          <line number="39">    </ux_guidelines></line>
          
          <line number="40">    <advertising></line>
          
          <line number="41">      {% for ad in advertising %}</line>
          
          <line number="42">      <item>{{ ad }}</item></line>
          
          <line number="43">      {% endfor %}</line>
          
          <line number="44">    </advertising></line>
          
          <line number="45">    <evolutivity></line>
          
          <line number="46">      {% for ev in evolutivity %}</line>
          
          <line number="47">      <item>{{ ev }}</item></line>
          
          <line number="48">      {% endfor %}</line>
          
          <line number="49">    </evolutivity></line>
          
          <line number="50">  </project_instructions></line>
          
          <line number="51"></line>
          
          <line number="52">  <project_structure></line>
          
          <line number="53">    {{ code_structure | safe }}</line>
          
          <line number="54">  </project_structure></line>
          
          <line number="55"></line>
          
          <line number="56">  <codebase_context></line>
          
          <line number="57">    <files></line>
          
          <line number="58">    {% for f in files_info %}</line>
          
          <line number="59">      <file></line>
          
          <line number="60">        <path>{{ f.find('path').text.strip() }}</path></line>
          
          <line number="61">        <description>{{ f.find('description').text.strip() }}</description></line>
          
          <line number="62">      </file></line>
          
          <line number="63">    {% endfor %}</line>
          
          <line number="64">    </files></line>
          
          <line number="65">  </codebase_context></line>
          
          <line number="66"></line>
          
          <line number="67">  <full_code_context></line>
          
          <line number="68">    <files></line>
          
          <line number="69">    {% for file_item in code_files %}</line>
          
          <line number="70">      <file></line>
          
          <line number="71">        <path>{{ file_item.path }}</path></line>
          
          <line number="72">        <language>{{ file_item.language }}</language></line>
          
          <line number="73">        <lines></line>
          
          <line number="74">          {% for line in file_item.lines %}</line>
          
          <line number="75">          <line number="{{ line.number }}">{{ line.text }}</line></line>
          
          <line number="76">          {% endfor %}</line>
          
          <line number="77">        </lines></line>
          
          <line number="78">      </file></line>
          
          <line number="79">    {% endfor %}</line>
          
          <line number="80">    </files></line>
          
          <line number="81">  </full_code_context></line>
          
          <line number="82"></line>
          
          <line number="83">  <format></line>
          
          <line number="84">    <selected>{{ chosen_format }}</selected></line>
          
          <line number="85">    <instructions></line>
          
          <line number="86">      {% for instr in format_instructions %}</line>
          
          <line number="87">      <instruction>{{ instr }}</instruction></line>
          
          <line number="88">      {% endfor %}</line>
          
          <line number="89">    </instructions></line>
          
          <line number="90">    <examples></line>
          
          <line number="91">      {% for ex in format_examples %}</line>
          
          <line number="92">      <example>{{ ex }}</example></line>
          
          <line number="93">      {% endfor %}</line>
          
          <line number="94">    </examples></line>
          
          <line number="95">  </format></line>
          
          <line number="96"></line>
          
          <line number="97">  <request></line>
          
          <line number="98">    {{ request }}</line>
          
          <line number="99">  </request></line>
          
          <line number="100"></prompt></line>
          
          <line number="101"></line>
          
        </lines>
      </file>
    
      <file>
        <path>config/final_request.yaml</path>
        <language>yaml</language>
        <lines>
          
          <line number="1">final_request: "Je vais faire une analyse de mon projet et tu vas m'aider a le reorganiser et mieux le penser. Le problème actuel est que je trouve que c'est désordonné. D'un côté l'utilisateur doit à la fois fournir dans config/ des fichiers par rapport à son projet. Il doit récupérer le résultat final dans output/ qui contient aussi les fichiers générés automatiquement. Y a-t-il un moyen de rendre le projet plus facile à utiliser ? Propose des suggestions."</line>
          
        </lines>
      </file>
    
      <file>
        <path>config/user_config.yaml</path>
        <language>yaml</language>
        <lines>
          
          <line number="1">source_directory: "."</line>
          
          <line number="2">exclude_patterns:</line>
          
          <line number="3">  - data</line>
          
          <line number="4">  - .git</line>
          
          <line number="5">  - .github</line>
          
          <line number="6">  - .vscode</line>
          
          <line number="7">  - .idea</line>
          
          <line number="8">  - .husky</line>
          
          <line number="9">  - venv</line>
          
          <line number="10">  - node_modules</line>
          
          <line number="11">  - dist</line>
          
          <line number="12">  - build</line>
          
          <line number="13">  - coverage</line>
          
          <line number="14">  - .cache</line>
          
          <line number="15">  - out</line>
          
          <line number="16">  - "*.log"</line>
          
          <line number="17">  - ".DS_Store"</line>
          
          <line number="18">  - "Thumbs.db"</line>
          
          <line number="19">  - ".env"</line>
          
          <line number="20">  - ".env.*"</line>
          
          <line number="21">  - "yarn.lock"</line>
          
          <line number="22">  - "package-lock.json"</line>
          
          <line number="23">  - "*.tmp"</line>
          
          <line number="24">  - "*.bak"</line>
          
          <line number="25">  - "*.swp"</line>
          
          <line number="26"></line>
          
          <line number="27">project_instructions:</line>
          
          <line number="28">  project_name: "Immersive Try-On Kiosk"</line>
          
          <line number="29">  objectives:</line>
          
          <line number="30">    - "Provide an immersive and fluent user experience to virtually try on clothing."</line>
          
          <line number="31">    - "Ensure a complete workflow: from initial photo capture to generating multiple try-on images."</line>
          
          <line number="32">    - "Facilitate easy addition of new clothing categories, items, and languages."</line>
          
          <line number="33">  code_conventions:</line>
          
          <line number="34">    language_stack:</line>
          
          <line number="35">      frontend: "React (ESModules, functional components)"</line>
          
          <line number="36">      backend: "Node.js / Express"</line>
          
          <line number="37">    directories_structure:</line>
          
          <line number="38">      frontend: "src/components, src/pages, src/services, src/styles"</line>
          
          <line number="39">      backend: "src/routes, src/controllers, src=models, src=services"</line>
          
          <line number="40">    coding_style:</line>
          
          <line number="41">      - "Follow ES6 conventions"</line>
          
          <line number="42">      - "Write clean, well-commented, and readable code"</line>
          
          <line number="43">      - "Separate business logic from presentation"</line>
          
          <line number="44">      - "Use hooks and context for state management if necessary"</line>
          
          <line number="45">  privacy_and_legal:</line>
          
          <line number="46">    - "Obtain explicit consent before capturing and saving photos"</line>
          
          <line number="47">    - "Save each session and its associated images in the database"</line>
          
          <line number="48">    - "No reuse of images outside the current session"</line>
          
          <line number="49">  performance_and_architecture:</line>
          
          <line number="50">    - "Image generation should take between 5s and 1min max"</line>
          
          <line number="51">    - "Only one user session at a time"</line>
          
          <line number="52">    - "Maintain a clean, modular, and maintainable codebase"</line>
          
          <line number="53">  ux_guidelines:</line>
          
          <line number="54">    - "Fullscreen interface without global scroll"</line>
          
          <line number="55">    - "Smooth navigation, visual and audio feedback"</line>
          
          <line number="56">    - "Large buttons, clear text"</line>
          
          <line number="57">    - "On-the-fly language switching"</line>
          
          <line number="58">    - "Scrollable sidebars for history and item selection"</line>
          
          <line number="59">  advertising:</line>
          
          <line number="60">    - "Display a non-intrusive ad during image generation"</line>
          
          <line number="61">  evolutivity:</line>
          
          <line number="62">    - "Add new categories, items, and languages easily"</line>
          
          <line number="63">    - "Maintain a code structure that supports future extensions"</line>
          
          <line number="64"></line>
          
          <line number="65">codebase_context:</line>
          
          <line number="66">  - path: "frontend/src/pages/Home.js"</line>
          
          <line number="67">    description: "Displays webcam feed, 'Let's Play' button, and language switcher at startup."</line>
          
          <line number="68">  - path: "frontend/src/pages/ConsentModal.js"</line>
          
          <line number="69">    description: "Handles legal consent before taking and saving photos."</line>
          
          <line number="70">  - path: "frontend/src/pages/TutorialAndCountdown.js"</line>
          
          <line number="71">    description: "Shows a countdown and tutorial overlay to guide user positioning before photo capture."</line>
          
          <line number="72">  - path: "frontend/src/pages/PhotoValidation.js"</line>
          
          <line number="73">    description: "Displays the captured photo, allowing confirmation or retaking."</line>
          
          <line number="74">  - path: "frontend/src/pages/MainScreen.js"</line>
          
          <line number="75">    description: "Main interface after initial photo validation, shows selected image, history of generated images, and item/category selection."</line>
          
          <line number="76">  - path: "frontend/src/components/LanguageSwitcher.js"</line>
          
          <line number="77">    description: "Allows user to switch languages at any time."</line>
          
          <line number="78">  - path: "frontend/src/components/CategorySelector.js"</line>
          
          <line number="79">    description: "Displays clothing categories and triggers a modal for item selection."</line>
          
          <line number="80">  - path: "frontend/src/components/ClothesModal.js"</line>
          
          <line number="81">    description: "Transparent modal listing available items for the selected category."</line>
          
          <line number="82">  - path: "frontend/src/services/api.js"</line>
          
          <line number="83">    description: "Handles communication with backend (Node.js/Express) for image saving and retrieval."</line>
          
          <line number="84">  - path: "backend/src/routes/sessionRoutes.js"</line>
          
          <line number="85">    description: "Defines routes for session creation, photo saving, and image retrieval."</line>
          
          <line number="86">  - path: "backend/src/controllers/sessionController.js"</line>
          
          <line number="87">    description: "Implements business logic for managing sessions and photos."</line>
          
          <line number="88">  - path: "backend/src/services/imageGeneration.js"</line>
          
          <line number="89">    description: "Interfaces with the image generation engine (AI) to create try-on outputs."</line>
          
          <line number="90"></line>
          
        </lines>
      </file>
    
      <file>
        <path>config/formats/xml.xml</path>
        <language>none</language>
        <lines>
          
          <line number="1"><?xml version="1.0" encoding="UTF-8"?></line>
          
          <line number="2"><format></line>
          
          <line number="3">  <instructions></line>
          
          <line number="4">    <instruction>Use XML tags to structure your response.</instruction></line>
          
          <line number="5">    <instruction>Use &lt;code&gt; elements for code samples.</instruction></line>
          
          <line number="6">  </instructions></line>
          
          <line number="7">  <examples></line>
          
          <line number="8">    <example>&lt;example&gt;</example></line>
          
          <line number="9">    <example>  &lt;title&gt;Title&lt;/title&gt;</example></line>
          
          <line number="10">    <example>  &lt;list&gt;</example></line>
          
          <line number="11">    <example>    &lt;item&gt;Bullet point&lt;/item&gt;</example></line>
          
          <line number="12">    <example>  &lt;/list&gt;</example></line>
          
          <line number="13">    <example>&lt;/example&gt;</example></line>
          
          <line number="14">  </examples></line>
          
          <line number="15"></format></line>
          
          <line number="16"></line>
          
        </lines>
      </file>
    
      <file>
        <path>config/formats/diff.xml</path>
        <language>none</language>
        <lines>
          
          <line number="1"><?xml version="1.0" encoding="UTF-8"?></line>
          
          <line number="2"><format></line>
          
          <line number="3">  <instructions></line>
          
          <line number="4">    <instruction>Provide all code changes as a unified diff (patch) format.</instruction></line>
          
          <line number="5">    <instruction>Include all modifications for all files in a single ```diff code block.</instruction></line>
          
          <line number="6">    <instruction>Do not provide explanations outside the diff code block.</instruction></line>
          
          <line number="7">  </instructions></line>
          
          <line number="8">  <examples></line>
          
          <line number="9">    <example>```diff</example></line>
          
          <line number="10">    <example>--- a/path/to/original/file.js</example></line>
          
          <line number="11">    <example>+++ b/path/to/original/file.js</example></line>
          
          <line number="12">    <example>@@ -10,7 +10,7 @@</example></line>
          
          <line number="13">    <example>-old line</example></line>
          
          <line number="14">    <example>+new line</example></line>
          
          <line number="15">    <example>```</example></line>
          
          <line number="16">  </examples></line>
          
          <line number="17"></format></line>
          
          <line number="18"></line>
          
        </lines>
      </file>
    
      <file>
        <path>config/formats/none.xml</path>
        <language>none</language>
        <lines>
          
          <line number="1"><?xml version="1.0" encoding="UTF-8"?></line>
          
          <line number="2"><format></line>
          
          <line number="3">  <instructions></line>
          
          <line number="4">    <instruction>No specific formatting.</instruction></line>
          
          <line number="5">  </instructions></line>
          
          <line number="6">  <examples></line>
          
          <line number="7">    <example>Just plain text without special formatting.</example></line>
          
          <line number="8">  </examples></line>
          
          <line number="9"></format></line>
          
          <line number="10"></line>
          
        </lines>
      </file>
    
      <file>
        <path>config/formats/markdown.xml</path>
        <language>none</language>
        <lines>
          
          <line number="1"><?xml version="1.0" encoding="UTF-8"?></line>
          
          <line number="2"><format></line>
          
          <line number="3">  <instructions></line>
          
          <line number="4">    <instruction>Use Markdown syntax.</instruction></line>
          
          <line number="5">    <instruction>Include code blocks with ```language for code samples.</instruction></line>
          
          <line number="6">  </instructions></line>
          
          <line number="7">  <examples></line>
          
          <line number="8">    <example>**Example (Markdown)**</example></line>
          
          <line number="9">    <example>```markdown</example></line>
          
          <line number="10">    <example># Title</example></line>
          
          <line number="11">    <example>- Bullet point</example></line>
          
          <line number="12">    <example>```</example></line>
          
          <line number="13">  </examples></line>
          
          <line number="14"></format></line>
          
          <line number="15"></line>
          
        </lines>
      </file>
    
      <file>
        <path>config/formats/json.xml</path>
        <language>none</language>
        <lines>
          
          <line number="1"><?xml version="1.0" encoding="UTF-8"?></line>
          
          <line number="2"><format></line>
          
          <line number="3">  <instructions></line>
          
          <line number="4">    <instruction>Use JSON formatting.</instruction></line>
          
          <line number="5">    <instruction>Present keys and values in a JSON structure.</instruction></line>
          
          <line number="6">  </instructions></line>
          
          <line number="7">  <examples></line>
          
          <line number="8">    <example>{</example></line>
          
          <line number="9">    <example>"title": "Title",</example></line>
          
          <line number="10">    <example>"items": ["Bullet point"]</example></line>
          
          <line number="11">    <example>}</example></line>
          
          <line number="12">  </examples></line>
          
          <line number="13"></format></line>
          
          <line number="14"></line>
          
        </lines>
      </file>
    
    </files>
  </full_code_context>

  <format>
    <selected>none</selected>
    <instructions>
      
      <instruction>No specific formatting.</instruction>
      
    </instructions>
    <examples>
      
      <example>Just plain text without special formatting.</example>
      
    </examples>
  </format>

  <request>
    Je vais faire une analyse de mon projet et tu vas m'aider a le reorganiser et mieux le penser. Le problème actuel est que je trouve que c'est désordonné. D'un côté l'utilisateur doit à la fois fournir dans config/ des fichiers par rapport à son projet. Il doit récupérer le résultat final dans output/ qui contient aussi les fichiers générés automatiquement. Y a-t-il un moyen de rendre le projet plus facile à utiliser ? Propose des suggestions.
  </request>
</prompt>
